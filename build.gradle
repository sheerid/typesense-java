plugins {
    id 'java-library'
    id 'signing'
    id 'maven-publish'
    id('io.github.gradle-nexus.publish-plugin') version '1.1.0'
    id 'org.hidetake.swagger.generator' version '2.19.2'
}

repositories {
    mavenCentral()
}

group = 'org.typesense'
version = '0.0.8'
sourceCompatibility = 1.8
targetCompatibility = 1.8

jar {
    manifest {
        attributes "Main-Class": "org.typesense.api.Client"
    }

    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    } {
        exclude "META-INF/*.SF"
        exclude "META-INF/*.DSA"
        exclude "META-INF/*.RSA"
        duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
    }

}

sourceSets {
    integrationTest {
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
        java.srcDir file('src/integration-test/java')
        resources.srcDir file('src/integration-test/resources')
    }
}

configurations {
    integrationTestImplementation.extendsFrom implementation
    integrationTestRuntimeOnly.extendsFrom runtimeOnly
}

java {
    withJavadocJar()
    withSourcesJar()
}

tasks.register('integrationTest', Test) {
    description = 'Runs integration tests (assumes running Docker image or local server)'
    group = 'verification'
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
    outputs.upToDateWhen { false }
    shouldRunAfter test
}

check.dependsOn integrationTest

dependencies {
    implementation "javax.xml.bind:jaxb-api:2.3.1"
    implementation "org.apache.logging.log4j:log4j-api:2.19.0"
    implementation "org.apache.logging.log4j:log4j-core:2.19.0"
    implementation "io.swagger.core.v3:swagger-annotations:2.0.0"
    implementation "com.fasterxml.jackson.module:jackson-module-jaxb-annotations:2.14.1"
    implementation "com.squareup.okhttp3:okhttp:4.9.1"
    implementation group: 'javax.annotation', name: 'javax.annotation-api', version: '1.3.2'


    testImplementation "junit:junit:4.12"
    testImplementation "org.hamcrest:hamcrest-all:1.3"
    integrationTestImplementation "junit:junit:4.12"
    integrationTestImplementation "org.hamcrest:hamcrest-all:1.3"

    swaggerCodegen 'io.swagger.codegen.v3:swagger-codegen-cli:3.0.36'
}

swaggerSources {
    typesense {
        inputFile = file('openapi.yaml')
        code {
            language = "java"
            configFile = file("swagger-config.json")
            components = ['models']
        }
    }
}

compileJava.dependsOn swaggerSources.typesense.code
sourceSets.main.java.srcDir "${swaggerSources.typesense.code.outputDir}/src/main/java"
sourceSets.main.resources.srcDir "${swaggerSources.typesense.code.outputDir}/src/main/resources"

nexusPublishing {
    repositories {
        sonatype {
            nexusUrl.set(uri("https://s01.oss.sonatype.org/service/local/"))
            snapshotRepositoryUrl.set(uri("https://s01.oss.sonatype.org/content/repositories/snapshots/"))
        }
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from(components.java)
            pom {
                name = 'typesense-java'
                description = 'Typesense Java Client'
                url = 'https://github.com/typesense/typesense-java'
                licenses {
                    license {
                        name = 'GNU General Public License v3.0'
                        url = 'https://www.gnu.org/licenses/gpl-3.0.en.html'
                    }
                }
                developers {
                    developer {
                        id = 'typesense'
                        name = 'Typesense'
                    }
                }
                scm {
                    url = 'https://github.com/typesense/typesense-java'
                    connection = 'scm:git://github.com/typesense/typesense-java.git'
                    developerConnection = 'scm:git://github.com/typesense/typesense-java.git'
                }
            }
        }
    }
}

if (project.hasProperty("signing.keyId")) {
    signing {
        sign publishing.publications.mavenJava
    }
}
